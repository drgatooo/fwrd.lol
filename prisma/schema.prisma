generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid()) @map("_id")
    name          String
    email         String        @unique
    emailVerified DateTime?
    image         String?
    premium       Boolean       @default(false)
    accounts      Account[]
    sessions      Session[]
    links         Link[]
    accessTokens  AccessToken[]
    linkInBio     LinkInBio?
}

model LinkInBio {
    id          String      @id @default(cuid()) @map("_id")
    userId      String      @unique
    user        User        @relation(fields: [userId], references: [id])
    description String?
    palette     String[]
    title       String?
    image       String?
    imageId     String?
    footer      String?
    username    String?
    buttonRound ButtonRound @default(none)
    buttonStyle ButtonStyle @default(fill)
}

enum ButtonRound {
    none
    medium
    full
}

enum ButtonStyle {
    fill
    outline
    hardshadow
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Link {
    id          String   @id @default(cuid()) @map("_id")
    alias       String   @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    description String?
    url         String
    creatorId   String
    visits      Int      @default(0)
    creator     User     @relation(fields: [creatorId], references: [id])

    inBio    Boolean @default(false)
    asSocial Boolean @default(false)
    libLabel String?
}

model AccessToken {
    id          String   @id @default(cuid()) @map("_id")
    accessToken String   @unique
    userId      String
    expires     DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
}
